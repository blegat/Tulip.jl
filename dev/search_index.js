var documenterSearchIndex = {"docs":
[{"location":"manual/formulation/#Problem-formulation-1","page":"Problem formulation","title":"Problem formulation","text":"","category":"section"},{"location":"manual/formulation/#Model-input-1","page":"Problem formulation","title":"Model input","text":"","category":"section"},{"location":"manual/formulation/#","page":"Problem formulation","title":"Problem formulation","text":"Tulip takes as input LP problems of the form","category":"page"},{"location":"manual/formulation/#","page":"Problem formulation","title":"Problem formulation","text":"    beginarrayrrcll\n    (P)    \n    displaystyle min_x  c^Tx  +  c_0\n    st\n     l^b_i leq  a_i^T x  leq u^b_i  forall i = 1  m\n     l^x_j leq  x_j  leq u^x_j  forall j = 1  n\n    endarray","category":"page"},{"location":"manual/formulation/#","page":"Problem formulation","title":"Problem formulation","text":"where l^bx u^b x in mathbbR cup  - infty + infty , i.e., some of the bounds may be infinite.","category":"page"},{"location":"manual/formulation/#","page":"Problem formulation","title":"Problem formulation","text":"This original formulation is then converted to standard form.","category":"page"},{"location":"manual/formulation/#Standard-form-1","page":"Problem formulation","title":"Standard form","text":"","category":"section"},{"location":"manual/formulation/#","page":"Problem formulation","title":"Problem formulation","text":"Internally, Tulip solves LPs of the form","category":"page"},{"location":"manual/formulation/#","page":"Problem formulation","title":"Problem formulation","text":"    beginarrayrl\n    (P)    \n    displaystyle min_x\n     c^T x +  c_0\n    st\n     A x = b\n     x leq u\n     x geq 0\n    endarray","category":"page"},{"location":"manual/formulation/#","page":"Problem formulation","title":"Problem formulation","text":"where x c u in mathbbR^n, A in mathbbR^m times n and b in mathbbR^m. Some u_j may may take infinite value, i.e., the corresponding variable x_j has no upper bound.","category":"page"},{"location":"manual/formulation/#","page":"Problem formulation","title":"Problem formulation","text":"The original problem is automatically reformulated into standard form before the optimization is performed. This transformation is transparent to the user.","category":"page"},{"location":"reference/linear_solvers/#","page":"Linear solvers","title":"Linear solvers","text":"CurrentModule = Tulip.TLPLinearAlgebra","category":"page"},{"location":"reference/linear_solvers/#AbstractLinearSolver-1","page":"Linear solvers","title":"AbstractLinearSolver","text":"","category":"section"},{"location":"reference/linear_solvers/#","page":"Linear solvers","title":"Linear solvers","text":"This is the base type from which all implementations should derive.","category":"page"},{"location":"reference/linear_solvers/#","page":"Linear solvers","title":"Linear solvers","text":"AbstractLinearSolver","category":"page"},{"location":"reference/linear_solvers/#Tulip.TLPLinearAlgebra.AbstractLinearSolver","page":"Linear solvers","title":"Tulip.TLPLinearAlgebra.AbstractLinearSolver","text":"AbstractLinearSolver{Tv}\n\nAbstract container for solving an augmented system\n\n    [-(Θ^{-1} + Rp)   A'] [dx] = [ξd]\n    [   A             Rd] [dy] = [ξp]\n\nwhere ξd and ξp are given right-hand side.\n\n\n\n\n\n","category":"type"},{"location":"reference/linear_solvers/#","page":"Linear solvers","title":"Linear solvers","text":"Custom linear solvers should inherit from the AbstractLinearSolver class, and extend the following two functions:","category":"page"},{"location":"reference/linear_solvers/#","page":"Linear solvers","title":"Linear solvers","text":"update_linear_solver!","category":"page"},{"location":"reference/linear_solvers/#Tulip.TLPLinearAlgebra.update_linear_solver!","page":"Linear solvers","title":"Tulip.TLPLinearAlgebra.update_linear_solver!","text":"update_linear_solver!(ls, θ, regP, regD)\n\nUpdate internal data, and re-compute factorization/pre-conditioner.\n\nAfter this call, ls can be used to solve the augmented system\n\n    [-(Θ^{-1} + Rp)   A'] [dx] = [ξd]\n    [   A             Rd] [dy] = [ξp]\n\nfor given right-hand sides ξd and ξp.\n\n\n\n\n\n","category":"function"},{"location":"reference/linear_solvers/#","page":"Linear solvers","title":"Linear solvers","text":"solve_augmented_system!","category":"page"},{"location":"reference/linear_solvers/#Tulip.TLPLinearAlgebra.solve_augmented_system!","page":"Linear solvers","title":"Tulip.TLPLinearAlgebra.solve_augmented_system!","text":"solve_augmented_system!(dx, dy, ls, ξp, ξd)\n\nSolve the symmetric quasi-definite augmented system\n\n    [-(Θ^{-1} + Rp)   A'] [dx] = [ξd]\n    [   A             Rd] [dy] = [ξp]\n\nand over-write dx, dy with the result.\n\nArguments\n\ndx, dy: Vectors of unknowns, modified in-place\nls: Linear solver for the augmented system\nξp, ξd: Right-hand-side vectors\n\n\n\n\n\n","category":"function"},{"location":"reference/linear_solvers/#DenseLinearSolver-1","page":"Linear solvers","title":"DenseLinearSolver","text":"","category":"section"},{"location":"reference/linear_solvers/#","page":"Linear solvers","title":"Linear solvers","text":"DenseLinearSolver","category":"page"},{"location":"reference/linear_solvers/#Tulip.TLPLinearAlgebra.DenseLinearSolver","page":"Linear solvers","title":"Tulip.TLPLinearAlgebra.DenseLinearSolver","text":"DenseLinearSolver{Tv}\n\nLinear solver for the 2x2 augmented system\n\n    [-(Θ^{-1} + Rp)   A'] [dx] = [xi_d]\n    [   A             Rd] [dy] = [xi_p]\n\nwith A dense.\n\nThe augmented system is automatically reduced to the normal equations system. BLAS/LAPACK functions are used whenever applicable.\n\n\n\n\n\n","category":"type"},{"location":"reference/linear_solvers/#","page":"Linear solvers","title":"Linear solvers","text":"update_linear_solver!(::DenseLinearSolver{Tv},::AbstractVector{Tv},::AbstractVector{Tv},::AbstractVector{Tv}) where{Tv<:Real}\nupdate_linear_solver!(::DenseLinearSolver{Tv},::AbstractVector{Tv},::AbstractVector{Tv},::AbstractVector{Tv}) where{Tv<:BlasReal}","category":"page"},{"location":"reference/linear_solvers/#Tulip.TLPLinearAlgebra.update_linear_solver!-Union{Tuple{Tv}, Tuple{Tulip.TLPLinearAlgebra.DenseLinearSolver{Tv},AbstractArray{Tv,1},AbstractArray{Tv,1},AbstractArray{Tv,1}}} where Tv<:Real","page":"Linear solvers","title":"Tulip.TLPLinearAlgebra.update_linear_solver!","text":"update_linear_solver!(ls::DenseLinearSolver{<:Real}, θ, regP, regD)\n\nCompute normal equations system matrix and update Cholesky factorization.\n\nUses Julia's generic linear algebra.\n\n\n\n\n\n","category":"method"},{"location":"reference/linear_solvers/#Tulip.TLPLinearAlgebra.update_linear_solver!-Union{Tuple{Tv}, Tuple{Tulip.TLPLinearAlgebra.DenseLinearSolver{Tv},AbstractArray{Tv,1},AbstractArray{Tv,1},AbstractArray{Tv,1}}} where Tv<:Union{Float32, Float64}","page":"Linear solvers","title":"Tulip.TLPLinearAlgebra.update_linear_solver!","text":"update_linear_solver!(ls::DenseLinearSolver{<:BlasReal}, θ, regP, regD)\n\nCompute normal equations system matrix and update Cholesky factorization.\n\nUses BLAS and LAPACK routines.\n\n\n\n\n\n","category":"method"},{"location":"reference/linear_solvers/#","page":"Linear solvers","title":"Linear solvers","text":"solve_augmented_system!(::Vector{Tv},::Vector{Tv},::DenseLinearSolver{Tv}, ::Vector{Tv}, ::Vector{Tv}) where{Tv<:Real}\nsolve_augmented_system!(::Vector{Tv},::Vector{Tv},::DenseLinearSolver{Tv}, ::Vector{Tv}, ::Vector{Tv}) where{Tv<:BlasReal}","category":"page"},{"location":"reference/linear_solvers/#Tulip.TLPLinearAlgebra.solve_augmented_system!-Union{Tuple{Tv}, Tuple{Array{Tv,1},Array{Tv,1},Tulip.TLPLinearAlgebra.DenseLinearSolver{Tv},Array{Tv,1},Array{Tv,1}}} where Tv<:Real","page":"Linear solvers","title":"Tulip.TLPLinearAlgebra.solve_augmented_system!","text":"solve_augmented_system!(dx, dy, ls, ξp, ξd)\n\nSolve the augmented system, overwriting dx, dy with the result.\n\nUses two generic triangular solves for solving the normal equations system.\n\n\n\n\n\n","category":"method"},{"location":"reference/linear_solvers/#Tulip.TLPLinearAlgebra.solve_augmented_system!-Union{Tuple{Tv}, Tuple{Array{Tv,1},Array{Tv,1},Tulip.TLPLinearAlgebra.DenseLinearSolver{Tv},Array{Tv,1},Array{Tv,1}}} where Tv<:Union{Float32, Float64}","page":"Linear solvers","title":"Tulip.TLPLinearAlgebra.solve_augmented_system!","text":"solve_augmented_system!(dx, dy, ls, ξp, ξd)\n\nSolve the augmented system, overwriting dx, dy with the result.\n\nUses one LAPACK call for solving the normal equations system.\n\n\n\n\n\n","category":"method"},{"location":"reference/linear_solvers/#SparseIndefLinearSolver-1","page":"Linear solvers","title":"SparseIndefLinearSolver","text":"","category":"section"},{"location":"reference/linear_solvers/#","page":"Linear solvers","title":"Linear solvers","text":"SparseIndefLinearSolver","category":"page"},{"location":"reference/linear_solvers/#Tulip.TLPLinearAlgebra.SparseIndefLinearSolver","page":"Linear solvers","title":"Tulip.TLPLinearAlgebra.SparseIndefLinearSolver","text":"SparseIndefLinearSolver\n\nLinear solver for the 2x2 augmented system with A sparse.\n\nUses an LDLt factorization of the quasi-definite augmented system.\n\n\n\n\n\n","category":"type"},{"location":"reference/linear_solvers/#","page":"Linear solvers","title":"Linear solvers","text":"update_linear_solver!(::SparseIndefLinearSolver,::AbstractVector{Float64},::AbstractVector{Float64},::AbstractVector{Float64})","category":"page"},{"location":"reference/linear_solvers/#Tulip.TLPLinearAlgebra.update_linear_solver!-Tuple{Tulip.TLPLinearAlgebra.SparseIndefLinearSolver,AbstractArray{Float64,1},AbstractArray{Float64,1},AbstractArray{Float64,1}}","page":"Linear solvers","title":"Tulip.TLPLinearAlgebra.update_linear_solver!","text":"update_linear_solver!(ls, θ, regP, regD)\n\nUpdate LDLt factorization of the augmented system.\n\nUpdate diagonal scaling theta, primal-dual regularizations, and re-compute     the factorization. Throws a PosDefException if matrix is not quasi-definite.\n\n\n\n\n\n","category":"method"},{"location":"reference/linear_solvers/#","page":"Linear solvers","title":"Linear solvers","text":"solve_augmented_system!(::Vector{Float64},::Vector{Float64},::SparseIndefLinearSolver, ::Vector{Float64}, ::Vector{Float64})","category":"page"},{"location":"reference/linear_solvers/#Tulip.TLPLinearAlgebra.solve_augmented_system!-Tuple{Array{Float64,1},Array{Float64,1},Tulip.TLPLinearAlgebra.SparseIndefLinearSolver,Array{Float64,1},Array{Float64,1}}","page":"Linear solvers","title":"Tulip.TLPLinearAlgebra.solve_augmented_system!","text":"solve_augmented_system!(dx, dy, ls, ξp, ξd)\n\nSolve the augmented system, overwriting dx, dy with the result.\n\n\n\n\n\n","category":"method"},{"location":"reference/linear_solvers/#SparsePosDefLinearSolver-1","page":"Linear solvers","title":"SparsePosDefLinearSolver","text":"","category":"section"},{"location":"reference/linear_solvers/#","page":"Linear solvers","title":"Linear solvers","text":"SparsePosDefLinearSolver","category":"page"},{"location":"reference/linear_solvers/#Tulip.TLPLinearAlgebra.SparsePosDefLinearSolver","page":"Linear solvers","title":"Tulip.TLPLinearAlgebra.SparsePosDefLinearSolver","text":"SparsePosDefLinearSolver\n\nLinear solver for the 2x2 augmented system\n\n    -(Θ^-1 + Rp)   A dx = xi_d\n       A             Rd dy = xi_p\n\nwith A sparse.\n\nUses a Cholesky factorization of the positive definite normal equations system\n\n(A*(Θ^{-1} + Rp)^{-1}*A' + Rd)  dy = xi_p + A*(Θ^{-1} + Rp)^{-1}*xi_d\n                                dx = (Θ^{-1} + Rp)^{-1} * (A' dy - xi_d)\n\n\n\n\n\n","category":"type"},{"location":"reference/linear_solvers/#","page":"Linear solvers","title":"Linear solvers","text":"update_linear_solver!(::SparsePosDefLinearSolver,::AbstractVector{Float64},::AbstractVector{Float64},::AbstractVector{Float64})","category":"page"},{"location":"reference/linear_solvers/#Tulip.TLPLinearAlgebra.update_linear_solver!-Tuple{Tulip.TLPLinearAlgebra.SparsePosDefLinearSolver,AbstractArray{Float64,1},AbstractArray{Float64,1},AbstractArray{Float64,1}}","page":"Linear solvers","title":"Tulip.TLPLinearAlgebra.update_linear_solver!","text":"update_linear_solver!(ls, θ, regP, regD)\n\nCompute normal equation system matrix, and update the factorization.\n\n\n\n\n\n","category":"method"},{"location":"reference/linear_solvers/#","page":"Linear solvers","title":"Linear solvers","text":"solve_augmented_system!(::Vector{Float64},::Vector{Float64},::SparsePosDefLinearSolver, ::Vector{Float64}, ::Vector{Float64})","category":"page"},{"location":"reference/linear_solvers/#Tulip.TLPLinearAlgebra.solve_augmented_system!-Tuple{Array{Float64,1},Array{Float64,1},Tulip.TLPLinearAlgebra.SparsePosDefLinearSolver,Array{Float64,1},Array{Float64,1}}","page":"Linear solvers","title":"Tulip.TLPLinearAlgebra.solve_augmented_system!","text":"solve_augmented_system!(dx, dy, ls, ξp, ξd)\n\nSolve the augmented system, overwriting dx, dy with the result.\n\n\n\n\n\n","category":"method"},{"location":"reference/linear_solvers/#LDLFLinearSolver-1","page":"Linear solvers","title":"LDLFLinearSolver","text":"","category":"section"},{"location":"reference/linear_solvers/#","page":"Linear solvers","title":"Linear solvers","text":"LDLFLinearSolver","category":"page"},{"location":"reference/linear_solvers/#Tulip.TLPLinearAlgebra.LDLFLinearSolver","page":"Linear solvers","title":"Tulip.TLPLinearAlgebra.LDLFLinearSolver","text":"LDLFLinearSolver{Tv}\n\nLinear solver for the 2x2 augmented system with A sparse.\n\nUses LDLFactorizations.jl to compute an LDLt factorization of the quasi-definite augmented system.\n\n\n\n\n\n","category":"type"},{"location":"reference/linear_solvers/#","page":"Linear solvers","title":"Linear solvers","text":"update_linear_solver!(::LDLFLinearSolver{Tv},::AbstractVector{Tv},::AbstractVector{Tv},::AbstractVector{Tv}) where{Tv<:Real}","category":"page"},{"location":"reference/linear_solvers/#Tulip.TLPLinearAlgebra.update_linear_solver!-Union{Tuple{Tv}, Tuple{Tulip.TLPLinearAlgebra.LDLFLinearSolver{Tv},AbstractArray{Tv,1},AbstractArray{Tv,1},AbstractArray{Tv,1}}} where Tv<:Real","page":"Linear solvers","title":"Tulip.TLPLinearAlgebra.update_linear_solver!","text":"update_linear_solver!(ls, θ, regP, regD)\n\nUpdate LDLt factorization of the augmented system.\n\nUpdate diagonal scaling theta, primal-dual regularizations, and re-compute     the factorization. Throws a PosDefException if matrix is not quasi-definite.\n\n\n\n\n\n","category":"method"},{"location":"reference/linear_solvers/#","page":"Linear solvers","title":"Linear solvers","text":"solve_augmented_system!(::Vector{Tv},::Vector{Tv},::LDLFLinearSolver{Tv}, ::Vector{Tv}, ::Vector{Tv}) where{Tv<:Real}","category":"page"},{"location":"reference/linear_solvers/#Tulip.TLPLinearAlgebra.solve_augmented_system!-Union{Tuple{Tv}, Tuple{Array{Tv,1},Array{Tv,1},Tulip.TLPLinearAlgebra.LDLFLinearSolver{Tv},Array{Tv,1},Array{Tv,1}}} where Tv<:Real","page":"Linear solvers","title":"Tulip.TLPLinearAlgebra.solve_augmented_system!","text":"solve_augmented_system!(dx, dy, ls, ξp, ξd)\n\nSolve the augmented system, overwriting dx, dy with the result.\n\n\n\n\n\n","category":"method"},{"location":"manual/linear_systems/#","page":"Solving linear systems","title":"Solving linear systems","text":"CurrentModule = Tulip.TLPLinearAlgebra","category":"page"},{"location":"manual/linear_systems/#Solving-linear-systems-1","page":"Solving linear systems","title":"Solving linear systems","text":"","category":"section"},{"location":"manual/linear_systems/#","page":"Solving linear systems","title":"Solving linear systems","text":"The interior-point algorithm in Tulip requires the solution, at each iteration, of the following symmetric quasi-definite augmented system","category":"page"},{"location":"manual/linear_systems/#","page":"Solving linear systems","title":"Solving linear systems","text":"beginbmatrix\n    -(Theta^-1 + R_p)  A^T\n    A  R_d\nendbmatrix\nbeginbmatrix\n    Delta x\n    Delta y\nendbmatrix\n=\nbeginbmatrix\n    xi_d\n    xi_p\nendbmatrix","category":"page"},{"location":"manual/linear_systems/#","page":"Solving linear systems","title":"Solving linear systems","text":"where","category":"page"},{"location":"manual/linear_systems/#","page":"Solving linear systems","title":"Solving linear systems","text":"Delta x Delta y are primal and dual search directions,\nA is the problem's constraint matrix,\nTheta, R_p and R_d are positive diagonal matrices,\nxi_p xi_d are right-hand side vectors.","category":"page"},{"location":"manual/linear_systems/#","page":"Solving linear systems","title":"Solving linear systems","text":"The augmented system above can be reduced to the positive-definite normal equations system","category":"page"},{"location":"manual/linear_systems/#","page":"Solving linear systems","title":"Solving linear systems","text":"beginarrayrl\nleft(\n    A (Theta^-1 + R_p)^-1 A^T + R_d\nright)\nDelta y\n =\nxi_p + A (Θ^-1 + R_p)^-1 xi_d\nDelta x = (Θ^-1 + R_p)^-1 (A^T Delta y - xi_d)\nendarray","category":"page"},{"location":"manual/linear_systems/#","page":"Solving linear systems","title":"Solving linear systems","text":"When selected, this reduction is transparent to the interior-point algorithm.","category":"page"},{"location":"manual/linear_systems/#","page":"Solving linear systems","title":"Solving linear systems","text":"To enable the use of fast external libraries and/or specialized routines, the resolution of linear systems is performed by a linear solver object. Linear solvers can be customized with the options below.","category":"page"},{"location":"manual/linear_systems/#Linear-solver-options-1","page":"Solving linear systems","title":"Linear solver options","text":"","category":"section"},{"location":"manual/linear_systems/#System-1","page":"Solving linear systems","title":"System","text":"","category":"section"},{"location":"manual/linear_systems/#","page":"Solving linear systems","title":"Solving linear systems","text":"LinearSystem","category":"page"},{"location":"manual/linear_systems/#Tulip.TLPLinearAlgebra.LinearSystem","page":"Solving linear systems","title":"Tulip.TLPLinearAlgebra.LinearSystem","text":"LinearSystem\n\nIndicates which linear system is solved.\n\n\n\n\n\n","category":"type"},{"location":"manual/linear_systems/#","page":"Solving linear systems","title":"Solving linear systems","text":"DefaultSystem","category":"page"},{"location":"manual/linear_systems/#Tulip.TLPLinearAlgebra.DefaultSystem","page":"Solving linear systems","title":"Tulip.TLPLinearAlgebra.DefaultSystem","text":"DefaultSystem\n\nChoose linear system to be solved using default option.\n\n\n\n\n\n","category":"type"},{"location":"manual/linear_systems/#","page":"Solving linear systems","title":"Solving linear systems","text":"AugmentedSystem","category":"page"},{"location":"manual/linear_systems/#Tulip.TLPLinearAlgebra.AugmentedSystem","page":"Solving linear systems","title":"Tulip.TLPLinearAlgebra.AugmentedSystem","text":"AugmentedSystem\n\nSolve the augmented system, i.e., without reducing to normal equations.\n\n\n\n\n\n","category":"type"},{"location":"manual/linear_systems/#","page":"Solving linear systems","title":"Solving linear systems","text":"NormalEquations","category":"page"},{"location":"manual/linear_systems/#Tulip.TLPLinearAlgebra.NormalEquations","page":"Solving linear systems","title":"Tulip.TLPLinearAlgebra.NormalEquations","text":"NormalEquations\n\nSolve the normal equations system.\n\n\n\n\n\n","category":"type"},{"location":"manual/linear_systems/#Backend-1","page":"Solving linear systems","title":"Backend","text":"","category":"section"},{"location":"manual/linear_systems/#","page":"Solving linear systems","title":"Solving linear systems","text":"LSBackend","category":"page"},{"location":"manual/linear_systems/#Tulip.TLPLinearAlgebra.LSBackend","page":"Solving linear systems","title":"Tulip.TLPLinearAlgebra.LSBackend","text":"LSBackend\n\nBackend used for solving linear systems.\n\n\n\n\n\n","category":"type"},{"location":"manual/linear_systems/#","page":"Solving linear systems","title":"Solving linear systems","text":"DefaultBackend","category":"page"},{"location":"manual/linear_systems/#Tulip.TLPLinearAlgebra.DefaultBackend","page":"Solving linear systems","title":"Tulip.TLPLinearAlgebra.DefaultBackend","text":"DefaultBackend\n\nChose linear solver backend automatically.\n\nFor A::Matrix{Tv}, defaults to Lapack (i.e., dense solver).\nFor A::AbstractMatrix{Float64}, defaults to Cholmod\nOtherwise, defaults to LDLFact\n\n\n\n\n\n","category":"type"},{"location":"manual/linear_systems/#","page":"Solving linear systems","title":"Solving linear systems","text":"Lapack","category":"page"},{"location":"manual/linear_systems/#Tulip.TLPLinearAlgebra.Lapack","page":"Solving linear systems","title":"Tulip.TLPLinearAlgebra.Lapack","text":"Lapack <: LSBackend\n\nUse LAPACK backend.\n\nOptions available:\n\nNumerical precision: Tv<:Real\nFloat32 and Float64 will use LAPACK.\nOther numerical types will use Julia's generic cholesky factorization.\nNormalEquations only, with Cholesky factorization\n\n\n\n\n\n","category":"type"},{"location":"manual/linear_systems/#","page":"Solving linear systems","title":"Solving linear systems","text":"Cholmod","category":"page"},{"location":"manual/linear_systems/#Tulip.TLPLinearAlgebra.Cholmod","page":"Solving linear systems","title":"Tulip.TLPLinearAlgebra.Cholmod","text":"Cholmod <: LSBackend\n\nUse CHOLMOD backend.\n\nOptions available:\n\nFloat64 only\nAugmented system with LDL factorization\nNormal equations with Cholesky factorization\n\n\n\n\n\n","category":"type"},{"location":"manual/linear_systems/#","page":"Solving linear systems","title":"Solving linear systems","text":"LDLFact","category":"page"},{"location":"manual/linear_systems/#Tulip.TLPLinearAlgebra.LDLFact","page":"Solving linear systems","title":"Tulip.TLPLinearAlgebra.LDLFact","text":"LDLFact <: LSBackend\n\nUse LDLFactorizations backend.\n\nOptions available:\n\nAny numerical type T\nAugmented system with LDL factorization\n\n\n\n\n\n","category":"type"},{"location":"manual/linear_systems/#-1","page":"Solving linear systems","title":"","text":"","category":"section"},{"location":"manual/linear_systems/#Supported-linear-solvers-1","page":"Solving linear systems","title":"Supported linear solvers","text":"","category":"section"},{"location":"manual/linear_systems/#","page":"Solving linear systems","title":"Solving linear systems","text":"Here is a list of currently supported linear solvers:","category":"page"},{"location":"manual/linear_systems/#","page":"Solving linear systems","title":"Solving linear systems","text":"Linear solver type Tv System LSBackend Method\nDenseLinearSolver Real NormalEquations Lapack Cholesky\nSparseIndefLinearSolver Float64 AugmentedSystem Cholmod LDL\nSparsePosDefLinearSolver Float64 NormalEquations Cholmod Cholesky\nLDLFLinearSolver Real AugmentedSystem LDLFact LDL","category":"page"},{"location":"manual/linear_systems/#Default-options-1","page":"Solving linear systems","title":"Default options","text":"","category":"section"},{"location":"manual/linear_systems/#","page":"Solving linear systems","title":"Solving linear systems","text":"If no option is specified, then the linear solver is chosen as follows:","category":"page"},{"location":"manual/linear_systems/#","page":"Solving linear systems","title":"Solving linear systems","text":"A is dense: DenseLinearSolver\nIf A sparse and Tv is Float64: SparseIndefLinearSolver\nAll other cases: LDLFLinearSolver","category":"page"},{"location":"#","page":"Home","title":"Home","text":"CurrentModule = Tulip","category":"page"},{"location":"#Tulip.jl-1","page":"Home","title":"Tulip.jl","text":"","category":"section"},{"location":"#Overview-1","page":"Home","title":"Overview","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Tulip is an open-source interior-point solver for linear programming.","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Tulip is 100% Julia, so install it just like any Julia package:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"julia> ]\npkg> add Tulip","category":"page"},{"location":"#","page":"Home","title":"Home","text":"No additional building step is required.","category":"page"},{"location":"#Citing-Tulip.jl-1","page":"Home","title":"Citing Tulip.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"If you use Tulip in your work, we kindly ask that you cite the following reference. The PDF is freely available here, and serves as a user manual for advanced users.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"@TechReport{Tulip.jl,\n    title = {{Tulip}.jl: an open-source interior-point linear optimization\n    solver with abstract linear algebra},\n    url = {https://www.gerad.ca/fr/papers/G-2019-36},\n    Journal = {Les Cahiers du Gerad},\n    Author = {Anjos, Miguel F. and Lodi, Andrea and Tanneau, Mathieu},\n    year = {2019}\n}","category":"page"}]
}
